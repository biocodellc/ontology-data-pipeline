# Copyright (C) 2017 Brian J. Stucky
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# Provides high-level management of build targets.  Associates build target
# classes with sets of command-line argument name/value pairs and returns an
# instance of the appropriate build target after inspecting command-line
# argument values.
#

# Python imports.
from __future__ import unicode_literals
from collections import namedtuple

# Java imports.


# Define a simple "struct"-like type for associating build target classes with
# sets of command-line argument name/value pairs.  The members are:
#   tclass: The target class.
#   argvals (dict): A dictionary of argname/value pairs.
TargetMap = namedtuple('TargetMap', 'tclass, argvals')


class BuildTargetManager:
    """
    Manages build targets.  Build targets are associated with sets of
    command-line argument name/value pairs, and when a matching set of
    arguments is passed in by client code, the associated target is
    instantiated and returned.
    """
    def __init__(self):
        # The list of build target mappings.
        self.targetmaps = []

    def addBuildTarget(self, targetclass, **argvals):
        """
        Adds a build target mapping.

        targetclass: The class of the build target.
        argvals: Command-line argument values to map to the target.  These
            should be passed as keyword arguments.
        """
        targetmap = TargetMap(tclass=targetclass, argvals=argvals)
        self.targetmaps.append(targetmap)

    def _getBuildTargetNames(self, argname, **argvals):
        """
        Returns a list of valid build target names.  The names are generated by
        inspecting the values of a given command-line argument.  Each element
        of the returned list is itself a list, the elements of which are all
        valid build target names that map to the same build target class.

        argname: The command-line argument from which to generate the name
            values.
        argvals: Additional argument values, specified as keyword arguments, to
            use as constraints when generating the list of target names.
        """
        # A dictionary containing sets of build target names with the classes
        # they map to as keys.
        tnames = {}
        # A set to ensure we only return unique build target names.
        allnames = set()

        for tmap in self.targetmaps:
            if argname in tmap.argvals:
                # Check if the argument value constraints also match.
                constraints_match = True
                for name in argvals:
                    if name in tmap.argvals:
                        if argvals[name] != tmap.argvals[name]:
                            constraints_match = False
                    else:
                        constraints_match = False

                nameval = tmap.argvals[argname]
                if constraints_match and (nameval not in allnames):
                    allnames.add(nameval)
                    if tmap.tclass not in tnames:
                        tnames[tmap.tclass] = set()
                    tnames[tmap.tclass].add(nameval)

        tnames_l = []
        for tclass in tnames:
            tnames_l.append(list(tnames[tclass]))

        return tnames_l

    def _generateNamesStr(self, nlist):
        """
        Converts a list of name strings into a single string in which the name
        strings are quoted, comma separated, and the last element is joined
        with "or".
        """
        names_str = ''
        if len(nlist) == 1:
            names_str = '"{0}"'.format(nlist[0])
        elif len(nlist) == 2:
            names_str = '"{0}" or "{1}"'.format(nlist[0], nlist[1])
        elif len(nlist) > 2:
            names_str = '"' + '", "'.join(nlist[:len(nlist) - 1]) + '", '
            names_str += 'or "' + nlist[-1] + '"'

        return names_str

    def _getSynonymousNamesStr(self, nlist):
        """
        Returns a string containing names for a particular build target that
        are synonymous.

        nlist: A list of name strings.
        """
        nlist.sort()

        names_str = ''
        if len(nlist) == 1:
            names_str = '"{0}"'.format(nlist[0])
        elif len(nlist) > 1:
            names_str = '"{0}" (also {1})'.format(
                nlist[0], self._generateNamesStr(nlist[1:])
            )
        
        return names_str

    def getBuildTargetNamesStr(self, argname, **argvals):
        """
        Returns a string containing the valid build target names.  The names
        are generated by inspecting the value of a given command-line argument.

        argname: The command-line argument from which to generate the name
            values.
        argvals: Additional argument values, specified as keyword arguments, to
            use as constraints when generating the list of target names.
        """
        tnames = self._getBuildTargetNames(argname, **argvals)

        nstrslist = [self._getSynonymousNamesStr(nlist) for nlist in tnames]
        nstrslist.sort()

        names_str = ''
        if len(nstrslist) == 1:
            names_str = nstrslist[0]
        elif len(nstrslist) == 2:
            names_str = '{0} or {1}'.format(nstrslist[0], nstrslist[1])
        elif len(nstrslist) > 2:
            names_str = ', '.join(nstrslist[:len(nstrslist) - 1]) + ', or '
            names_str += nstrslist[-1]

        return names_str

    def _getMatchingTargets(self, args):
        """
        Returns a list of all target maps that match the specified argument
        values.  Supports partial matching of string values.  The target maps
        are returned sorted in descending order by the number of matching
        arguments.

        args: A "struct" of command-line argument names and values.  Typically
            obtained from ArgumentParser.
        """
        matches = []

        for targetmap in self.targetmaps:
            # Count the total number of matching argument values.
            matching_argcnt = 0
            for argname in targetmap.argvals:
                # Check if the attribute exists in the provided argument set.
                # Using hasattr() would require less code, but doesn't work
                # well with properties.
                has_arg = True
                argval = None
                try:
                    argval = getattr(args, argname)
                except AttributeError:
                    has_arg = False

                if has_arg:
                    if isinstance(argval, basestring):
                        argval = argval.strip()
                        if (
                            argval != '' and
                            targetmap.argvals[argname].startswith(argval)
                        ):
                            matching_argcnt += 1
                    elif targetmap.argvals[argname] == argval:
                        matching_argcnt += 1

            if matching_argcnt == len(targetmap.argvals):
                matches.append(targetmap)

        # Sort the target maps by the number of matching arguments.
        matches.sort(
            key=lambda targetmap: len(targetmap.argvals), reverse=True
        )

        return matches

    def _getAmbiguousTargetErrorMsg(self, args, matches, tname_arg):
        """
        Tries to a generate a helpful error message for cases where the
        specified arguments do not unambiguously map to a single build target.

        args: A "struct" of command-line argument names and values.  Typically
            obtained from ArgumentParser.
        matches: A list of all matching target mappings.
        tname_arg: the name of the argument that contains the main build
            target/task name.  If a non-empty value is provided, all argument
            sets must include this argument.
        """
        errormsg = ''
        if tname_arg != '':
            # Check if all matching target names are the same.  If so, then the
            # ambiguity is due to additional arguments.
            sametname = True
            tname = matches[0].argvals[tname_arg]
            for match in matches:
                if match.argvals[tname_arg] != tname:
                    sametname = False

            if not(sametname):
                tnames = list(set(
                    [tmapping.argvals[tname_arg] for tmapping in matches]
                ))
                tnames.sort()
                tnames_str = '"' + '", "'.join(tnames) + '"'
                errormsg = (
                    'The specified build task, "{0}", matched more than one '
                    'build task name.  Please provide the full build task '
                    'name (or enough characters to disambiguate it).  The '
                    'following tasks matched: {1}.'.format(
                        getattr(args, tname_arg), tnames_str
                    )
                )
            else:
                errormsg = (
                    'The arguments for the build task "{0}" could not be '
                    'unambiguously matched to a single build operation.  '
                    'Please check the argument values.'.format(tname)
                )
        else:
            errormsg = (
                'The command-line arguments could not be unambiguously '
                'matched to a single build operation.  Please check the '
                'argument values.'
            )

        return errormsg

    def getBuildTarget(self, args, targetname_arg=''):
        """
        Returns an instance of the specified build target.  In the case that
        more than one target matches the provided command-line argument values,
        targets with the greatest number of command-line argument mappings will
        be matched first (that is, more specific target specifications will be
        matched before more general target specifications).

        args: A "struct" of command-line argument names and values.  Typically
            obtained from ArgumentParser.
        targetname_arg: The name of the argument that contains the main build
            target/task name.  This is used only for generating useful error
            messages.  If a non-empty value is provided, all argument sets must
            include this argument.
        """
        # Gather all target maps with matching argument name/value sets.
        matches = self._getMatchingTargets(args)

        targetmatch = None
        if len(matches) > 1:
            # Attempt to dis-ambiguate the target specification.  The matching
            # target maps will already be in descending order sorted by the
            # number of matching arguments, so we just need to see if the first
            # match has more arguments than the next.
            if len(matches[0].argvals) > len(matches[1].argvals):
                targetmatch = matches[0]
            else:
                raise RuntimeError(
                    self._getAmbiguousTargetErrorMsg(args, matches, targetname_arg)
                )
        elif len(matches) == 1:
            targetmatch = matches[0]
        else:
            if targetname_arg != '':
                errormsg = (
                    'Unknown build target: "{0}".  Valid build target names '
                    'are: {1}.'.format(
                        getattr(args, targetname_arg),
                        self.getBuildTargetNamesStr(targetname_arg)
                    )
                )
            else:
                errormsg = (
                    'Argument values could not be matched to a build target.'
                )

            raise RuntimeError(errormsg)

        target = targetmatch.tclass(args)

        return target

